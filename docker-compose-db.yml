version: '3.4'

services:
  mongodb:
    build:
      context: .
      dockerfile: Dockerfile_mongo
    container_name: mongodb
    hostname: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data/db:/data/db
    command: ["-f", "/docker-entrypoint-initdb.d/mongo-init.js"]
      # - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    # command: ["-f", "/etc/mongod.conf"]
# volumes:
#   ./data/db:

# services:
#    mongo1:
#       image: mongo:6
#       command: [--replSet, my-replica-set, --bind_ip_all, --port, "27017"]
#       ports:
#         - 27017:27017
#       healthcheck:
#         test: test $$(mongosh --port 27017 --quiet --eval "try {rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo:27017\"}]})} catch(e) {rs.status().ok}") -eq 1
#         interval: 10s
#         start_period: 30s 
#         # timeout: 30s
#         # start_period: 0s
#         # start_interval: 1s
#         # retries: 30
# #
# # services:
# #   mongo1:
# #     image: mongo
# #     command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
# #     # command: ["--replSet", "rs1",  "--port", "27017"]
# #     ports:
# #       - 30001:27017
# #     extra_hosts:
# #       - "host.docker.internal:host-gateway"
# #     healthcheck:
# #       test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs1',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
# #       interval: 5s
# #       timeout: 30s
# #       start_period: 0s
# #       start_interval: 1s
# #       retries: 30
# #     volumes:
# #       - "mongo1_data:/home/iakovos/Git/text-me/data/db"
# #       - "mongo1_config:/home/iakovos/Git/text-me/data/configdb"
# #
# # volumes:
# #   mongo1_data:
# #   mongo1_config:
